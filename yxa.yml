name: yxa-cli

# Variables defined here can be used in commands with $VAR_NAME or ${VAR_NAME} syntax
variables:
  BINARY_NAME: yxa
  VERSION: dev
  BUILD_TIME: $(date -u +"%Y-%m-%dT%H:%M:%SZ")
  LDFLAGS: -ldflags "-s -w -X main.version=${VERSION} -X main.buildTime=${BUILD_TIME}"
  DIST_DIR: ./dist



commands:
  # Build the CLI
  build:
    run: go build ${LDFLAGS} -o ${BINARY_NAME} .

  # Run tests
  test:
    run: go test -v -race ./...

  # Clean build artifacts
  clean:
    run: rm -f ${BINARY_NAME} && rm -rf ${DIST_DIR}

  # Install locally
  install:
    run: sudo mv ${BINARY_NAME} /usr/local/bin/${BINARY_NAME}
    depends: [build]

  # Create a new release
  release:
    run: |
      echo "Creating new release..."
      # Get the current tag
      current_tag=$(git describe --tags --abbrev=0 2>/dev/null || echo "none")
      
      # Calculate next version if current tag exists and follows semver
      if [[ $current_tag == v* ]] && [[ $current_tag =~ v([0-9]+)\.([0-9]+)\.([0-9]+) ]]; then
        major=${BASH_REMATCH[1]}
        minor=${BASH_REMATCH[2]}
        patch=${BASH_REMATCH[3]}
        
        # Increment minor version
        next_minor=$((minor + 1))
        suggested_version="v$major.$next_minor.0"
        
        echo "Current version: $current_tag"
        echo "Suggested next version: $suggested_version"
        read -p "Enter version [$suggested_version]: " version
        version=${version:-$suggested_version}
      else
        echo "No previous version tag found or tag doesn't follow semver format."
        read -p "Enter version (e.g. v1.0.0): " version
      fi
      
      # Validate version format
      if [[ ! $version =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
        echo "Warning: Version '$version' doesn't follow the recommended format (vX.Y.Z)"
        read -p "Continue anyway? (y/n): " confirm
        if [[ $confirm != "y" && $confirm != "Y" ]]; then
          echo "Release cancelled."
          exit 1
        fi
      fi
      
      VERSION=$version git tag -a $version -m "Release $version"
      git push origin $version
      echo "Release $version created and pushed. GitHub Actions will build and publish the release."
    depends: [build, test]

  # Build for all platforms
  dist:
    run: |
      mkdir -p ${DIST_DIR}
      GOOS=linux GOARCH=amd64 go build ${LDFLAGS} -o ${DIST_DIR}/${BINARY_NAME}-linux-amd64 .
      GOOS=darwin GOARCH=amd64 go build ${LDFLAGS} -o ${DIST_DIR}/${BINARY_NAME}-darwin-amd64 .
      GOOS=darwin GOARCH=arm64 go build ${LDFLAGS} -o ${DIST_DIR}/${BINARY_NAME}-darwin-arm64 .
      GOOS=windows GOARCH=amd64 go build ${LDFLAGS} -o ${DIST_DIR}/${BINARY_NAME}-windows-amd64.exe .
      echo "Done! Binaries are available in the ${DIST_DIR} directory."
    depends: [clean]

  # Run linting
  lint:
    run: golangci-lint run

  # Show version information
  version:
    run: |
      if [ -z "$(git describe --tags --exact-match 2>/dev/null)" ]; then
        echo "Development version ($(git rev-parse --short HEAD))"
      else
        echo "$(git describe --tags --exact-match)"
      fi
