name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'
          cache: true

      - name: Run unit tests
        run: |
          go test -v -race ./...

      - name: Run build for tests
        run: |
          go build -ldflags "-s -w -X main.version=test -X main.buildTime=$(date -u +"%Y-%m-%dT%H:%M:%SZ")" -o yxa . 

      - name: Setup Bats and bats libs
        id: setup-bats
        uses: bats-core/bats-action@3.0.0

      - name: Run integration tests
        shell: bash
        env:
          BATS_LIB_PATH: ${{ steps.setup-bats.outputs.lib-path }}
          TERM: xterm
        run: bats tests/integration

      - name: Run linting
        uses: golangci/golangci-lint-action@v4
        with:
          version: latest
      
      - name: Run Gosec Security Scanner
        uses: securego/gosec@master
        with:
          args: ./...
          
      - name: Check Documentation
        run: |
          echo "Checking package documentation..."
          for pkg in $(go list ./...); do
            echo "Checking $pkg..."
            go doc $pkg > /dev/null 2>&1 || echo "::warning::Missing documentation for package $pkg"
          done
          
      - name: Check Test Coverage
        run: |
          go test -race ./... -cover 
          
      - name: Check Dependencies for Vulnerabilities
        run: |
          go install golang.org/x/vuln/cmd/govulncheck@latest
          govulncheck ./...
          
      - name: Check for Outdated Dependencies
        run: |
          go list -m -u all | grep -v "(latest)" || echo "All dependencies are up to date"

  build:
    name: Build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        goos: [linux, darwin, windows]
        goarch: [amd64, arm64]
        exclude:
          - goos: windows
            goarch: arm64
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'
          cache: true

      - name: Build
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
        run: go build -buildvcs=false -v .
